FORMAT: 1A
HOST: https://api-bookings.seatris.com/

# Seatris Guest Booking
Seatris Guest Booking is an API allowing users to make reservations

# Data Structures

## Shift (object)

+ id (number) - Id of shift
+ name (string) - Name of shift

## Floor (object)

+ id (number) - Id of floor
+ name (string) - Name of floor
+ order (number) - Order of floor, starting with 1. Lower value means it is more important

## ShiftCategory (object)

+ id (number) - Id of ShiftCategory
+ name (string) - Name of ShiftCategory
+ order (number) - Order of ShiftCategory, starting with 1. Lower value means it is more important

## ShiftTemplate (object)

+ id (number) - Id of template
+ floor_id (number) - Id of Floor
+ shift_category_id (number) - Id of ShiftCategory
+ noshow_fee_currency (string) - Currency for noshow fee
+ noshow_fee_cents (number) - Amount for noshow fee (in cents)
+ cancellation_limit_text (string) - Hint text for cancellations
+ cancellation_limit_for_groups_text (string) - Hint text for cancellations for groups
+ min_party_size_for_noshow (boolean) - minimun number of persons for a single booking for a payment

## Timeslot (object)
+ time: "12:00" (string) - time formated
+ shift_category_id: 3 (number)
+ waitlist: true (boolean) - only waitlist available
+ floor_id: 123 (number) - Id of floor

## Event (object)
+ id: "demo_ev_0_1_idx0" (string) - identifier for event
+ header: "1 Course Pre-Theater" (string) - header for event
+ description: "12 Classic Basics paired with Asian influences" (string) - description for event
+ price: 20400 (number) - price in cents, currency information is part of restaurant
+ image_url: "https://seatris-production.s3.amazonaws.com/r/e/317/images/header.jpg" (string) - absolut url for event image
+ offers: [] (array[Timeslot]) - timeslots with availibilities

## User (object)

+ firstname (string) - Firstname of user
+ lastname (string) - Lastname of user
+ email (string) - eMail of user
+ gender (string) - gender "male" or "female"
+ phone (string) - phone number of user
+ restrictions (string) - Comma seperated list of restrictions
+ restaurant_newsletter (boolean) - User wants a newsletter send


# GET /restaurants/{slug}
Data for restaurants, all needed for the guest booking.

+ Parameters
    + slug: `demo` (string, required) - ID of the Restaurant in the form of a slug
    + lang: 'de' (string, optional) - request param ?lang=de, representing the user's preferred language

+ Response 200 (application/json)

    + Attributes (object)
        + id: "demo" (string) - Slug of the restaurant
        + name: "NOBELHART & SCHMUTZIG" (string)
        + prefered_locale: `en` (string) - The prefered locale
        + guest_notes_for_booking_page: `Welcome to restaurant Nobelhart & Schmutzig. We serve delicious regional modern cuisine in a cosy atmosphere.` (string)
        + guest_notes_for_payment_page: `We kindly ask you to confirm your booking by entering your credit card details. Please, not that your table reservation is not confirmed without your credit card details.` (string)
        + payment_provider: `adyen` (string)
        + checkout_image_url:  `https://seatris-production.s3.amazonaws.com/restaurants/checkout_images/000/001/317/default/AMADOR4.jpg` (string)
        + welcome_image_url: `https://finedining-production.s3.amazonaws.com/mock/golvet_start.jpg` (string)
        + address_line: `Borsigstraße 9, 10115, Berlin, Germany` (string)
        + conversion_tracking_url: `http://www.example.com` (string)
        + privacy_policy_url: `https://s3.eu-central-1.amazonaws.com/seatris-legal/Restaurant-Datenschutzerklaerung.pdf` (string) - URL to the privacy policy document in Guest-Bookings
        + max_party_size: 7 (number)
        + guest_booking_starting_from_hint: "We are taking online bookings for June onwards" (string)
        + city: "Berlin" (string)
        + available_guest_languages: ["de", "en"] (array[string])
        + lang: "en" (string) - actual language of this response
        + phone: "+49 - 30 814540400" (string)
        + twitter: "https://twitter.com/SeatrisTeam" (string)
        + facebook: "https://www.facebook.com/seatris/" (string)
        + instagram: "https://www.facebook.com/seatris/" (string)
        + website: "https://www.seatris.com/" (string)
        + email: "sales@seatris.com" (string)
        + ask_for_preferences: true (boolean) - User should be asked for preferences
        + currency: "EUR" (string)
        + vat: 19 (number) - vat (mehrwertsteuer)
        + bookable_until: "2020-02-19" (string) - date till when booking is possible - formated
        + floors: [{"id":1,"name":"all_floors"}] (array[Floor]) - Array of Floors
        + shift_templates (array[ShiftTemplate]) - Array of Shifttemplates
        + shift_categories (array[ShiftCategory]) - Array of Shiftcategories
        + events (array[Event]) - Array of Events

    + Body

            {
              "id": "demo",
              "name": "NOBELHART & SCHMUTZIG",
              "guest_notes_for_booking_page": "Welcome to restaurant Nobelhart & Schmutzig. We serve delicious regional modern cuisine in a cosy atmosphere.",
              "prefered_locale": "de",
              "guest_notes_for_payment_page": "We kindly ask you to confirm your booking by entering your credit card details. Please, not that your table reservation is not confirmed without your credit card details.",
              "payment_provider": "adyen",
              "checkout_image_url": "https://seatris-production.s3.amazonaws.com/restaurants/checkout_images/000/001/317/default/AMADOR4.jpg",
              "welcome_image_url": "https://finedining-production.s3.amazonaws.com/mock/golvet_start.jpg",
              "address_line": "Borsigstraße 9, 10115, Berlin, Germany",
              "conversion_tracking_url": "http://www.example.com",
              "privacy_policy_url": "https://s3.eu-central-1.amazonaws.com/seatris-legal/Restaurant-Datenschutzerklaerung.pdf",
              "max_party_size": 7,
              "guest_booking_starting_from_hint": "We are taking online bookings for June onwards",
              "city": "Berlin",
              "available_guest_languages": ["de", "en"],
              "lang": "en",
              "phone": "+49 - 30 814540400",
              "twitter": "https://twitter.com/SeatrisTeam",
              "facebook": "https://www.facebook.com/seatris/",
              "instagram": "https://www.facebook.com/seatris/",
              "website": "https://www.seatris.com/",
              "email": "sales@seatris.com",
              "currency": "EUR",
              "vat": 19,
              "bookable_until": "2020-02-19",
              "ask_for_preferences": true,
              "floors": [{
                  "id": 1,
                  "name": "Restaurant",
                  "order": 1
                },
                {
                  "id": 2,
                  "name": "Bar",
                  "order": 3
                },
                {
                  "id": 3,
                  "name": "Chef Table",
                  "order": 2
              }],
              "shift_categories": [{
                  "id": 1,
                  "name": "Dinner",
                  "order": 2
              },
              {
                  "id": 2,
                  "name": "Lunch",
                  "order": 1
              }],
              "shift_templates": [{
                  "id": 1,
                  "floor_id": 1,
                  "shift_category_id": 1,
                  "noshow_fee_currency": "EUR",
                  "noshow_fee_cents": 4000,
                  "cancellation_limit_text": "Cancellations can be made free of charge until 3 PM on the booked date. Cancellations made after this time and when the table cannot be refilled will be charged EUR 80 per person.<br>&nbsp;<br>Your card will not be charged at this time. All credit card data entered onto this site is encrypted and secured with verified payment providers.",
                  "cancellation_limit_for_groups_text": "14:00 am Tag vor der Buchung",
                  "min_party_size_for_noshow": 5
                },
                {
                  "id": 2,
                  "floor_id": 1,
                  "shift_category_id": 2,
                  "noshow_fee_currency": "EUR",
                  "noshow_fee_cents": 0,
                  "cancellation_limit_text": "Cancellations can be made free of charge until 3 PM on the booked date. Cancellations made after this time and when the table cannot be refilled will be charged EUR 80 per person.<br>&nbsp;<br>Your card will not be charged at this time. All credit card data entered onto this site is encrypted and secured with verified payment providers.",
                  "cancellation_limit_for_groups_text": "",
                  "min_party_size_for_noshow": 4
                },
                {
                  "id": 3,
                  "floor_id": 2,
                  "shift_category_id": 1,
                  "noshow_fee_currency": "EUR",
                  "noshow_fee_cents": 5000,
                  "cancellation_limit_text": "Cancellations can be made free of charge until 3 PM on the booked date. Cancellations made after this time and when the table cannot be refilled will be charged EUR 80 per person.<br>&nbsp;<br>Your card will not be charged at this time. All credit card data entered onto this site is encrypted and secured with verified payment providers.",
                  "cancellation_limit_for_groups_text": "",
                  "min_party_size_for_noshow": 3
                },
                {
                  "id": 4,
                  "floor_id": 3,
                  "shift_category_id": 1,
                  "noshow_fee_currency": "EUR",
                  "noshow_fee_cents": 8000,
                  "cancellation_limit_text": "Cancellations can be made free of charge until 3 PM on the booked date. Cancellations made after this time and when the table cannot be refilled will be charged EUR 80 per person.<br>&nbsp;<br>Your card will not be charged at this time. All credit card data entered onto this site is encrypted and secured with verified payment providers.",
                  "cancellation_limit_for_groups_text": "",
                  "min_party_size_for_noshow": 4
                }
              ],
              "events": [
                {
                  "id": "demo_ev_0_1_idx0",
                  "header": "1 Course Pre-Theater",
                  "description": "12 Classic Basics paired with Asian influences",
                  "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic1.jpg"
                },
                {
                  "id": "demo_ev_0_2_idx0",
                  "header": "2 Course Pre-Theater",
                  "description": "12+2 Classic Basics paired with Asian influences",
                  "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic4.jpg"
                }
              ]
            }


# GET /restaurants/{slug}/dates
+ Parameters
    + slug: `demo` (string, required) - ID of the Restaurant in the form of a slug
    + persons: 3 (number, required) - the number of persons
    + start_date: `2019-01-01` (string, required) - Date in form of 'YY-MM-DD' to start the search
    + end_date: `2019-01-31` (string, required) - Date in form of 'YY-MM-DD' where search ends
    + floor_id: 7 (number, optional)
    + shift_category_id: 2 (number, optional)
    + event_id: 'abc_event' (string, optional) - Id or slug? of event, used to filter availabilities to this event only

+ Request (application/json)

            {
              "start_date": "2019-08-01",
              "end_date": "2019-08-31",
              "persons": 3,
              "floor_id": 7,
              "shift_category_id": 2
            }

+ Response 200 (application/json)

    + Attributes (array)
        "2019-08-14" (string) - date formated

    + Body

            [
              "2019-02-01",
              "2019-02-02",
              "2019-02-03",
              "2019-02-04",
              "2019-02-05",
              "2019-02-06",
              "2019-02-07",
              "2019-02-08",
              "2019-02-09",
              "2019-02-10",
              "2019-02-11",
              "2019-02-12",
              "2019-02-13",
              "2019-02-14",
              "2019-02-15",
              "2019-02-16",
              "2019-02-17",
              "2019-02-18",
              "2019-02-19",
              "2019-02-20",
              "2019-02-21",
              "2019-02-22",
              "2019-02-23",
              "2019-02-24",
              "2019-02-25",
              "2019-02-26",
              "2019-02-27",
              "2019-02-28",
              "2019-01-29",
              "2019-01-30",
              "2019-01-31"
            ]

# GET /restaurants/{slug}/availabilities
+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug
    + persons: 2 (number, required) - the number of persons
    + date: `2019-08-01` (string, required) - Date in form of 'YY-MM-DD' from which to load the slots. if date is today all from retaurant now are returned
    + floor_id: 123 (number, optional) - Id of floor
    + shift_category_id: 2 (number, optional) - Id of shift-category, used as filter
    + event_id: 'abc_event' (string, optional) - Id or slug? of event, used to filter availabilities to this event only
    + num_days: 1 (number, optional) - How many days to send availabilities for
    + first_availability: false (boolean, optional) - Continue search until first available slot is found [waitlist=false]

+ Response 200 (application/json)

    + Attributes (array)
        + date: "2019-08-01" (string) - date of availabilities
        + events: []  (array[Event]) - Array of Events
        + slots: [] (array[Timeslot]) - Array of Timeslots
        + floor_id: 123 (number) - Id of floor
        + shift_category_id: 1 (number) - Id of shift-category

    + Body

            [
              {
                "date": "2019-02-15",
                "floor_id": 1,
                "shift_category_id": 1,
                "events": [
                  {
                    "id": "demo_ev_0_2_idx0",
                    "header": "3 Course Pre-Theater",
                    "description": "Classic Basics paired with Asian influences",
                    "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic1.jpg",
                    "offers": [
                      {
                        "time": "18:00",
                        "price": "2400",
                        "waitlist":false
                      },
                      {
                        "time": "19:00",
                        "price": "3600",
                        "waitlist":false
                      }
                    ]
                  },
                  {
                    "id": "demo_ev_0_3_idx0",
                    "header": "3.5 Course Pre-Theater",
                    "description": "Classic Basics paired with Asian influences",
                    "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic2.jpg",
                    "offers": [
                      {
                        "time": "22:45",
                        "price": "5900",
                        "waitlist":true
                      }
                    ]
                  },
                  {
                    "id": "demo_ev_0_4_idx0",
                    "header": "5 Course After-Theater",
                    "description": "Classic Basics paired with Asian influences",
                    "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic3.jpg",
                    "offers": [
                      {
                        "time": "22:00",
                        "price": "7200",
                        "waitlist":false
                      },
                      {
                        "time": "22:15",
                        "price": "5200",
                        "waitlist":true
                      }
                    ]
                  },
                  {
                    "id": "demo_ev_0_5_idx0",
                    "header": "0 Course Pre-Theater",
                    "description": "Classic Basics paired with Asian influences",
                    "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic4.jpg",
                    "offers": []
                  }
                ],
                "slots": [
                  {
                    "waitlist":false,
                    "time":"18:00"
                  },
                  {
                    "waitlist":false,
                    "time":"18:15"
                  },
                  {
                    "waitlist":false,
                    "time":"18:30"
                  },
                  {
                    "waitlist":false,
                    "time":"18:45"
                  },
                  {
                    "waitlist":false,
                    "time":"19:00"
                  },
                  {
                    "waitlist":true,
                    "time":"19:45"
                  },
                  {
                    "waitlist":true,
                    "time":"19:15"
                  }
                ]
              },
              {
                "date": "2019-02-15",
                "floor_id": 1,
                "shift_category_id": 2,
                "events": [],
                "slots": [
                  {
                    "waitlist":false,
                    "time":"11:00"
                  },
                  {
                    "waitlist":false,
                    "time":"11:30"
                  },
                  {
                    "waitlist":false,
                    "time":"12:00"
                  },
                  {
                    "waitlist":false,
                    "time":"12:30"
                  }
                ]
              }
            ]

# GET /restaurants/{slug}/availabilities?event_id=demo_ev_0_1_idx0
filtered availability search, permalink: /demo/event/demo_ev_0_1_idx0

+ Response 200 (application/json)

    + Attributes (array)
        + date: "2019-08-01" (string) - date of availabilities
        + floor_id: 1 (number)
        + shift_category_id: 1 (number)
        + events: []  (array[Event]) - Array of Events
        + slots: [] (array[Timeslot]) - Array of Timeslots

    + Body

            [
              {
                "date": "2019-02-15",
                "floor_id": 1,
                "shift_category_id": 1,
                "events": [
                  {
                    "id": "demo_ev_0_1_idx0",
                    "header": "1 Course Pre-Theater",
                    "description": "12 Classic Basics paired with Asian influences",
                    "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic1.jpg",
                    "offers": [
                      {
                        "waitlist": false,
                        "time": "21:00",
                        "price": "2400"
                      },
                      {
                        "waitlist": false,
                        "time": "22:00",
                        "price": "3600"
                      }
                    ]
                  }
                ],
                "slots": []
              }
            ]

# GET /restaurants/{slug}/availabilities?event_id=demo_ev_0_2_idx0
filtered availability search, permalink: /demo/event/demo_ev_0_2_idx0

+ Response 200 (application/json)

    + Attributes (array)
        + date: "2019-08-01" (string) - date of availabilities
        + floor_id: 1 (number)
        + shift_category_id: 1 (number)
        + events: []  (array[Event]) - Array of Events
        + slots: [] (array[Timeslot]) - Array of Timeslots

    + Body

            [
              {
                "date": "2019-02-15",
                "floor_id": 2,
                "shift_category_id": 2,
                "events": [
                  {
                    "id": "demo_ev_0_2_idx0",
                    "header": "2 Course Pre-Theater",
                    "description": "12+2 Classic Basics paired with Asian influences",
                    "image_url": "https://finedining-production.s3.amazonaws.com/mock/event_pic4.jpg",
                    "offers": [
                      {
                        "waitlist": false,
                        "time": "18:00",
                        "price": "2400"
                      },
                      {
                        "waitlist": false,
                        "time": "19:00",
                        "price": "3600"
                      }
                    ]
                  }
                ],
                "slots": []
              }
            ]

# GET /restaurants/{slug}/payment_tokens
Data needed to tokenize creditcards. Response depends on provider.

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug


+ Response 200 (application/json)


    + Body

            {
              "provider": "Adyen",
              "generationtime": "2019-09-30T17:44:04+00:00",
              "cse_public_key": "10001|995CF0D3A9BDCBE05AE5F377D9B791E6F19DB4F4224079A71A1E00C84B80EB19D876DA98C5ED111F736D5438E78EB516A884B005895A7B5C4BE439DB5D346B3EAAC64CE3BFDAB8EE124CF8BD6423B472FC08C079C0C6A1570426B22CD7F6520BEA03F9ED816106895D9158E68D805719279F2FD78F52A12D648AF7D078C068F0662DCAC13473236FAC77D112695702FD8073A90BBDB72799502AB5DDCB28C97D8503B71D399F4A92559A59C2B5EFC28F9A323BE04D95893E3324A27091D01EF3EEDBD8905A7B27A05D24498A1B43F042E97CD5E07FC7168CA2300976085A66A8FAB1E79C20D92038E36D808865703BD80F51A928C4DEAC3DCD7D70E21983B40D"
            }

# GET /restaurants/{slug}/payment_tokens?provider=braintree
Data needed to tokenize creditcards. Response depends on provider.

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug


+ Response 200 (application/json)


    + Body

            {
              "provider": "Braintree",
              "client_token": "eyJ2ZXJzaW9uIjoyLCJhdXRob3JpemF0aW9uRmluZ2VycHJpbnQiOiI4YzZmNjJkZjM4NGFmMTc4MDVmODQwZWY4Mzg1ZjJiZTg5OGI5NmIxYmU4YzViZDhmYTUxOTBmZWIxMGJhYjhifGNyZWF0ZWRfYXQ9MjAxOS0wMi0yMVQxMzo0Njo1NS45MjY5OTM4NzArMDAwMFx1MDAyNm1lcmNoYW50X2lkPTc2NndxM3E0M3l5MzJranRcdTAwMjZwdWJsaWNfa2V5PW1kY214M215cXBrZjRqODMiLCJjb25maWdVcmwiOiJodHRwczovL2FwaS5zYW5kYm94LmJyYWludHJlZWdhdGV3YXkuY29tOjQ0My9tZXJjaGFudHMvNzY2d3EzcTQzeXkzMmtqdC9jbGllbnRfYXBpL3YxL2NvbmZpZ3VyYXRpb24iLCJncmFwaFFMIjp7InVybCI6Imh0dHBzOi8vcGF5bWVudHMuc2FuZGJveC5icmFpbnRyZWUtYXBpLmNvbS9ncmFwaHFsIiwiZGF0ZSI6IjIwMTgtMDUtMDgifSwiY2hhbGxlbmdlcyI6W10sImVudmlyb25tZW50Ijoic2FuZGJveCIsImNsaWVudEFwaVVybCI6Imh0dHBzOi8vYXBpLnNhbmRib3guYnJhaW50cmVlZ2F0ZXdheS5jb206NDQzL21lcmNoYW50cy83NjZ3cTNxNDN5eTMya2p0L2NsaWVudF9hcGkiLCJhc3NldHNVcmwiOiJodHRwczovL2Fzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbSIsImF1dGhVcmwiOiJodHRwczovL2F1dGgudmVubW8uc2FuZGJveC5icmFpbnRyZWVnYXRld2F5LmNvbSIsImFuYWx5dGljcyI6eyJ1cmwiOiJodHRwczovL29yaWdpbi1hbmFseXRpY3Mtc2FuZC5zYW5kYm94LmJyYWludHJlZS1hcGkuY29tLzc2NndxM3E0M3l5MzJranQifSwidGhyZWVEU2VjdXJlRW5hYmxlZCI6dHJ1ZSwicGF5cGFsRW5hYmxlZCI6dHJ1ZSwicGF5cGFsIjp7ImRpc3BsYXlOYW1lIjoibm9jb21wIiwiY2xpZW50SWQiOm51bGwsInByaXZhY3lVcmwiOiJodHRwOi8vZXhhbXBsZS5jb20vcHAiLCJ1c2VyQWdyZWVtZW50VXJsIjoiaHR0cDovL2V4YW1wbGUuY29tL3RvcyIsImJhc2VVcmwiOiJodHRwczovL2Fzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbSIsImFzc2V0c1VybCI6Imh0dHBzOi8vY2hlY2tvdXQucGF5cGFsLmNvbSIsImRpcmVjdEJhc2VVcmwiOm51bGwsImFsbG93SHR0cCI6dHJ1ZSwiZW52aXJvbm1lbnROb05ldHdvcmsiOnRydWUsImVudmlyb25tZW50Ijoib2ZmbGluZSIsInVudmV0dGVkTWVyY2hhbnQiOmZhbHNlLCJicmFpbnRyZWVDbGllbnRJZCI6Im1hc3RlcmNsaWVudDMiLCJiaWxsaW5nQWdyZWVtZW50c0VuYWJsZWQiOnRydWUsIm1lcmNoYW50QWNjb3VudElkIjoibm9jb21wIiwiY3VycmVuY3lJc29Db2RlIjoiRVVSIn0sIm1lcmNoYW50SWQiOiI3NjZ3cTNxNDN5eTMya2p0IiwidmVubW8iOiJvZmYifQ=="
            }


# POST /restaurants/{slug}/verify_card

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug
    + client_token: "adyenjs_0_1_15$SNFRtDWNlo5iQHvZ2UcughUAVnl53YR25mnkPKA7x5S8SSSnAgBPCAqeWu+uQM4tnP4be5WzU0p2zqKfXFEesTNwLJF2k2G7+2/hRiGE1gxGN3qvqSg52OK+EWe8EN0A/ttFZWYv3VXHsH8k8CiZZ0tqSDGk3EIa4qM+e2ZTrlEq3WpiTsB7d1U7iHKqvYpXnzQ9xH759vpEHfwKbhN+h2nkCfGFGbo0Lm7znQJ3hLIaBeZKt6U6Ku2iNvSiisJnFg0OUUM53tZyFGxHZCkVW7uEFYLquVbTAFjTIepQjvM2Rapr3+EIyAJRSzxgNLVMRncitPTMWSRYop+CLQ2BNw==$000UeN1/tjL9QeY+V70327YxQMVB0sbJIvH3+1x8NHCJqC1rstBApl5huWdDxxxI7rbX0SVpizhclbLAg72YOLjQ580cXaemwEhTI66Va7J/Yt+/XRWZKoTAjCwO/QTqdyyKUi+nu32YwEMyzUFm3MfkPVuiyzj1/I5dO1bCQ1/5zYSZMvV78GOj+cPPbj+eSU30hCgv8xY0CD8WDONgte9Rcw5m2o9bNaacTXe/tR+BA9rwkuHLaFgUYXU6lfjcDJoo9D8d05vIA5xoZknYd4UoH8v/0fzYKnsm7xXNyMQqJPw13/XdL+v8PtVCeKkJao65Bxa0e/aDUdbotyRMqAVNEMZ1Suo741km8AgDoI37" (string, required) - token for credit card, returned by payment provider after tokenising the card

+ Response 200 (application/json)

    + Body

            {
              "success":true,
              "payment_id": "9234902"
            }


# POST /restaurants/{slug}/slot_locks
reserve a slot for the booking process.
HTTP 201 wenn success, 404 wenn success: false

+ Parameters
    + slug: demo (string, required)
    + persons: 3 (number, required)
    + time: "12:15" (string, required)
    + date: "2019-08-01" (string, required)
    + floor_id: 193304 (number, required)

+ Request (application/json)

            {
              "persons": 3,
              "date": "2019-08-01",
              "time": "12:15",
              "floor_id": 193304
            }

+ Response 201 (application/json)

    + Body

            {
              "success":true,
              "id": "4711"
            }


# DELETE /restaurants/{slug}/slot_locks/{id}
remove a slot lock

+ Parameters
    + slug: demo (string, required)
    + id: 4711 (number, required)

+ Request (application/json)

            {
            }

+ Response 204 (application/json)


# POST /restaurants/{slug}/bookings

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug
    + num_adults: 3 (number, required) - How many adults
    + num_infants: 2 (number, optional) - How many infants
    + num_children: 1 (number, optional) - How many children
    + time: "12:15" (string, required) -
    + is_request: false (boolean, required)
    + date: "2019-08-01" (string, required) - Date in form of 'YY-MM-DD' from which to load
    + floor_id: 193304 (number, required) - Id of Floor
    + event_id: 23 (number, optional) - Id of Event
    + notes_by_guest: "These are my notes" (string, optional) - Booking notes by guest
    + user: "user" : {
        "first_name": "Martin" (string, required) - The first name of the main person,
        "last_name": "Wöginger" (string, required),
        "email": "woeginger@exasoft.net" (string, required),
        "country": "Germany" (string, required),
        "gender": "male" (string, optional),
        "phone": "+491792404436" (string, required),
        "restrictions": "Veganer",
        "restaurant_newsletter": true (boolean, required)
        "locale": "en" (string, required) - the locale (de or en)
      } (User, required)
    + shift_category_id: 2 (number, optional) - Shift-Category if is_request and no specific slot
    + slot_lock_id: 4711 (number, optional) - ID of the slot-lock of this booking
    + payment_id: 298889 (number, required)

+ Request (application/json)

        {
              "num_adults": 3,
              "num_infants": 2,
              "num_children": 1,
              "date": "2019-01-16",
              "time": "20:15",
              "is_request": false,
              "floor_id": 193304,
              "notes_by_guest": "These are my notes",
              "user" : {
                "first_name": "Hannes",
                "last_name": "Mustermann",
                "email": "mustermann@example.com",
                "gender": "male",
                "phone": "+491792404223",
                "restrictions": "Veganer",
                "restaurant_newsletter": true,
                "locale": "en"
              },
              "shift_category_id": 2,
              "slot-lock-id": 4711,
              "payment_id": 298889
          }
+ Response 200 (application/json)

    + Body

            {
              "success":true,
              "id":110504,
              "cancellation_token":"mut6FvW1pQtzwXYpeVsQ"
            }

# GET /restaurants/{slug}/param_test
Data needed to tokenize creditcards. Response depends on provider.

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug


+ Response 200 (application/json)


    + Body

            {
              "floor": "missing"
            }

# GET /restaurants/{slug}/param_test?floor_id=2
Data needed to tokenize creditcards. Response depends on provider.

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug


+ Response 200 (application/json)


    + Body

            {
              "floor": 2
            }

# GET /restaurants/{slug}/param_test?floor_id=3
Data needed to tokenize creditcards. Response depends on provider.

+ Parameters
    + slug: demo (string, required) - ID of the Restaurant in the form of a slug


+ Response 200 (application/json)


    + Body

            {
              "floor": 3
            }